package com.whalez.reservationlive.ui.service_listimport android.annotation.SuppressLintimport androidx.appcompat.app.AppCompatActivityimport android.os.Bundleimport android.view.Viewimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelimport androidx.lifecycle.ViewModelProviderimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport com.skydoves.powermenu.kotlin.powerMenuimport com.whalez.reservationlive.Rimport com.whalez.reservationlive.data.api.ServiceDBClientimport com.whalez.reservationlive.data.api.ServiceDBInterfaceimport com.whalez.reservationlive.data.repository.NetworkStateimport com.whalez.reservationlive.ui.service_list.MenuFactory.Companion.APP_INFOimport com.whalez.reservationlive.ui.service_list.MenuFactory.Companion.FILTER_OPTIONimport com.whalez.reservationlive.ui.service_list.MenuFactory.Companion.RESERVATION_AVAILABLEimport kotlinx.android.synthetic.main.activity_main.*class MainActivity : AppCompatActivity() {    companion object {        const val SPAN_COUNT = 1        const val NO_NEED_CODE_IMG = -999    }    lateinit var codeName: String    private lateinit var viewModel: MainActivityViewModel    lateinit var servicePagedListRepository: ServicePagedListRepository    private val mainMenu by powerMenu(MenuFactory::class)    lateinit var serviceAdapter: ServicePagedListAdapter    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        codeName = intent.getStringExtra("codeName")!!        setCodeImageAndName()        rv_area.apply {            adapter = GuAdapter(context, codeName)            layoutManager = LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false)        }        val apiService: ServiceDBInterface = ServiceDBClient.getClient()        servicePagedListRepository = ServicePagedListRepository(apiService)        viewModel = getViewModel(codeName)        mainMenu.setOnMenuItemClickListener { position, _ ->            when(position) {                RESERVATION_AVAILABLE -> {                }                FILTER_OPTION -> {                }                APP_INFO -> {                }            }        }        serviceAdapter = ServicePagedListAdapter(this)        val gridLayoutManager = GridLayoutManager(this, SPAN_COUNT)        gridLayoutManager.spanSizeLookup = object : GridLayoutManager.SpanSizeLookup() {            override fun getSpanSize(position: Int): Int {                val viewType = serviceAdapter.getItemViewType(position)                return if (viewType == serviceAdapter.SERVICE_VIEW_TYPE) 1                else SPAN_COUNT            }        }        rv_service_list.apply {            layoutManager = gridLayoutManager            setHasFixedSize(true)            adapter = serviceAdapter        }        viewModel.servicePagedList.observe(this, Observer {            serviceAdapter.submitList(it)        })        viewModel.networkState.observe(this, Observer {            progress_bar.visibility =                if (viewModel.listIsEmpty() && it == NetworkState.LOADING) View.VISIBLE                else View.GONE            tv_error.visibility =                if (viewModel.listIsEmpty() && it == NetworkState.ERROR) View.VISIBLE                else View.GONE            if(!viewModel.listIsEmpty()) {                serviceAdapter.setNetworkState(it)            }        })    }    private fun getViewModel(codeName: String): MainActivityViewModel {        return ViewModelProvider(this, object : ViewModelProvider.Factory {            override fun <T : ViewModel?> create(modelClass: Class<T>): T {                @Suppress("UNCHECKED_CAST")                return MainActivityViewModel(servicePagedListRepository, codeName) as T            }        })[MainActivityViewModel::class.java]    }    @SuppressLint("SetTextI18n")    private fun setCodeImageAndName(){        tv_code_name.text = " $codeName"        val codeImage = when(codeName){            "축구장" -> R.drawable.ic_football_white            "풋살장" -> R.drawable.ic_futsal_white            "야구장" -> R.drawable.ic_baseball_white            "농구장" -> R.drawable.ic_basketball_white            "테니스장" -> R.drawable.ic_tennis_white            "배드민턴장" -> R.drawable.ic_badminton_white            "배구장" -> R.drawable.ic_volleyball_white            "다목적경기장" -> R.drawable.ic_multipurpose_white            "전체" -> {                codeName = ""                NO_NEED_CODE_IMG            }            else -> NO_NEED_CODE_IMG        }        if(codeImage != NO_NEED_CODE_IMG) tv_code_name.setCompoundDrawablesWithIntrinsicBounds(codeImage, 0, 0, 0)    }}